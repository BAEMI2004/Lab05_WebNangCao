import express from 'express';
import Product from '../models/product.js'; // ƒê·∫£m b·∫£o file model ƒë√∫ng

const router = express.Router();

// üõí L·∫•y danh s√°ch s·∫£n ph·∫©m v√† render trang EJS
router.get('/', async (req, res) => {
    try {
        const products = await Product.find();
        console.log("üìå Danh s√°ch s·∫£n ph·∫©m trong database:", products); // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        
        const cart = req.session.cart || []; // L·∫•y gi·ªè h√†ng t·ª´ session
        res.render('products', { products, cart });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        res.status(500).send("L·ªói server");
    }
});

// üîç L·∫•y chi ti·∫øt s·∫£n ph·∫©m
router.get('/:id', async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).send("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
        }
        const cart = req.session.cart || [];
        res.render('product-detail', { product, cart });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
        res.status(500).send("L·ªói server");
    }
});

// ‚ûï API th√™m s·∫£n ph·∫©m (h·ªó tr·ª£ Postman)
router.post('/add', async (req, res) => {
    try {
        const { name, price, description, image } = req.body;

        if (!name || !price || !description || !image) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m!" });
        }
        if (isNaN(price) || price <= 0) {
            return res.status(400).json({ error: "Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!" });
        }

        const newProduct = new Product({ name, price, description, image });
        await newProduct.save();

        res.status(201).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m!", product: newProduct });
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);
        res.status(500).json({ error: "L·ªói server khi th√™m s·∫£n ph·∫©m!" });
    }
});

// üóë X√≥a s·∫£n ph·∫©m theo ID
router.delete('/delete/:id', async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
        }

        await Product.findByIdAndDelete(req.params.id);
        res.status(200).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a!" });
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        res.status(500).json({ error: "L·ªói server khi x√≥a s·∫£n ph·∫©m!" });
    }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo ID
router.put('/update/:id', async (req, res) => {
    try {
        const { name, price, description, image } = req.body;

        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id,
            { name, price, description, image },
            { new: true, runValidators: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", updatedProduct });
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
        res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m!" });
    }
});

// üõí API l·∫•y danh s√°ch s·∫£n ph·∫©m cho Postman
router.get('/api/list', async (req, res) => {
    try {
        const products = await Product.find();
        console.log("üìå S·∫£n ph·∫©m tr·∫£ v·ªÅ API:", products);

        res.status(200).json({ products });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m!" });
    }
});

export default router;
